name: Deploy to Render

on:
  push:
    branches:
      - main
    paths:
      - 'hotspot_api/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hotspot_api_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MIX_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hotspot_api_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.15'
          otp-version: '26'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            hotspot_api/deps
            hotspot_api/_build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install dependencies
        working-directory: hotspot_api
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Check formatting
        working-directory: hotspot_api
        run: mix format --check-formatted

      - name: Run Credo
        working-directory: hotspot_api
        run: mix credo --strict

      - name: Compile
        working-directory: hotspot_api
        run: mix compile --warnings-as-errors

      - name: Run tests
        working-directory: hotspot_api
        run: mix test

  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        env:
          API_URL: ${{ secrets.API_URL }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${API_URL}/api/health)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status $response"
            exit 1
          fi
